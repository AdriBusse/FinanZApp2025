name: Android Signed Release

on:
  push:
    branches:
      - main
      - release/**
      - hotfix/**
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read

    # Optional: if you store secrets in a specific Environment, set it here
    # environment:
    #   name: production

    env:
      CI: true
      # Helpful Gradle defaults for CI
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.jvmargs='-Xmx3g -Dfile.encoding=UTF-8'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20 and cache npm
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install JS dependencies
        run: npm ci

      - name: Export version from package.json
        id: app_version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Detected app version: $VERSION"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Gradle cache
        uses: gradle/gradle-build-action@v3

      - name: Ensure Android SDK path in local.properties
        shell: bash
        run: |
          echo "sdk.dir=${ANDROID_SDK_ROOT}" > android/local.properties
          cat android/local.properties

      - name: Accept Android SDK licenses
        shell: bash
        run: yes | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --licenses || true

      - name: Restore signing keystore
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          test -n "$ANDROID_KEYSTORE_BASE64" || { echo "Missing secret ANDROID_KEYSTORE_BASE64"; exit 1; }
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > android/app/release.keystore
          ls -lh android/app/release.keystore

      - name: Build signed Release APK
        working-directory: android
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_ALIAS_PASSWORD: ${{ secrets.ANDROID_KEY_ALIAS_PASSWORD }}
        run: |
          chmod +x ./gradlew
          ./gradlew --no-daemon clean assembleRelease

      - name: Rename APK to include version
        shell: bash
        run: |
          APK_DIR=android/app/build/outputs/apk/release
          SRC="$APK_DIR/app-release.apk"
          DST="$APK_DIR/FinanZ-v${{ env.VERSION }}.apk"
          if [ -f "$SRC" ]; then mv "$SRC" "$DST"; fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: finanz-apk-v${{ env.VERSION }}
          path: android/app/build/outputs/apk/release/FinanZ-v${{ env.VERSION }}.apk

      # Optional: also build a signed AAB for Play Store uploads
      - name: Build signed App Bundle (AAB)
        if: ${{ github.event_name != 'pull_request' }} # skip on PRs if desired
        working-directory: android
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_ALIAS_PASSWORD: ${{ secrets.ANDROID_KEY_ALIAS_PASSWORD }}
        run: ./gradlew --no-daemon bundleRelease

      - name: Rename AAB to include version
        if: ${{ github.event_name != 'pull_request' }}
        shell: bash
        run: |
          BUNDLE_DIR=android/app/build/outputs/bundle/release
          SRC="$BUNDLE_DIR/app-release.aab"
          DST="$BUNDLE_DIR/FinanZ-v${{ env.VERSION }}.aab"
          if [ -f "$SRC" ]; then mv "$SRC" "$DST"; fi

      - name: Upload AAB artifact
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: finanz-aab-v${{ env.VERSION }}
          path: android/app/build/outputs/bundle/release/FinanZ-v${{ env.VERSION }}.aab

  upload-to-drive:
    name: Upload artifacts to Google Drive
    runs-on: ubuntu-latest
    needs: [build-android]
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: List downloaded artifacts
        run: |
          echo "Downloaded files:" && ls -R artifacts || true

      - name: Install rclone
        run: |
          sudo apt-get update
          sudo apt-get install -y rclone

      - name: Write service account JSON
        env:
          GDRIVE_SERVICE_ACCOUNT_JSON: ${{ secrets.GDRIVE_SERVICE_ACCOUNT_JSON }}
        run: |
          test -n "$GDRIVE_SERVICE_ACCOUNT_JSON" || { echo "Missing secret GDRIVE_SERVICE_ACCOUNT_JSON"; exit 1; }
          echo "$GDRIVE_SERVICE_ACCOUNT_JSON" > sa.json

      - name: Upload to Google Drive
        env:
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
          GDRIVE_TEAM_DRIVE: ${{ secrets.GDRIVE_TEAM_DRIVE }}
        run: |
          test -n "$GDRIVE_FOLDER_ID" || { echo "Missing secret GDRIVE_FOLDER_ID"; exit 1; }
          export RCLONE_CONFIG_GDRIVE_TYPE=drive
          export RCLONE_CONFIG_GDRIVE_SCOPE=drive
          export RCLONE_CONFIG_GDRIVE_SERVICE_ACCOUNT_FILE=${{ github.workspace }}/sa.json
          # If uploading to a shared drive, set team drive id
          if [ -n "$GDRIVE_TEAM_DRIVE" ]; then
            export RCLONE_CONFIG_GDRIVE_TEAM_DRIVE="$GDRIVE_TEAM_DRIVE"
          fi

          # Use root folder id as destination
          rclone copy artifacts gdrive: --drive-root-folder-id "$GDRIVE_FOLDER_ID" \
            --progress --drive-chunk-size 64M --transfers 4 --checkers 8 --retries 3 --low-level-retries 10
